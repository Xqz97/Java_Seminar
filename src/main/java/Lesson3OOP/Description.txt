
Класс Element - это узел двусвязного списка:
Каждый узел содержит в себе данные (переменная data) и ссылки на следующий и предыдущий элементы списка (next и previous соответственно).
В конструкторе класса Element происходит присвоение переданного параметра значения переменной data.
Методы getData(), getNext() и getPrevious() используются для получения значений соответствующих полей объекта.
Методы setData(), setNext() и setPrevious() используются для изменения значений соответствующих полей объекта.

Этот код представляет класс MyLinkedList:
Класс содержит два поля: start (начало списка) и end (конец списка). Кроме того, он содержит переменную count, которая хранит количество элементов в списке.
Класс также реализует интерфейс Iterable, что позволяет использовать его экземпляры в циклах foreach.
Метод iterator() возвращает объект типа Iterator, который может быть использован для итерации по всем элементам списка. В данном случае создается анонимный класс, который реализует методы hasNext() и next(). В каждый момент времени он хранит ссылку на текущий элемент списка и возвращает следующий элемент при вызове метода next(). Метод hasNext() проверяет, есть ли следующий элемент в списке.
Метод size() возвращает количество элементов в списке.
Метод getElement(index) возвращает элемент списка с заданным индексом index.
Метод get(index) использует метод getElement() для получения элемента списка с заданным индексом index и возвращает его данные.
Метод remove(index) удаляет элемент списка с заданным индексом index. Если удаляемый элемент находится в начале или конце списка, соответствующие поля start или end обновляются соответственно.
Метод add(index, data) добавляет элемент списка с данными data на заданную позицию index. Если index равен количеству элементов в списке, элемент добавляется в конец списка. Если index равен 0, элемент добавляется в начало списка.
Метод add(data) добавляет элемент списка с данными data в конец списка. Если список пустой, start и end устанавливаются на первый элемент списка. В противном случае, элемент добавляется после последнего элемента списка и обновляется указатель end.

Этот код также использует класс MyLinkedList для создания связанного списка строковых значений. Но в отличие от предыдущего примера, здесь не указан параметр типа при объявлении итератора, поэтому Java будет использовать тип Object по умолчанию.
Первые три строки создают новый экземпляр MyLinkedList и добавляют в него две строки "data_1" и "data_2". Затем на четвёртой строке в список добавляется новый элемент "data2_1" по индексу 1.
Далее, в цикле while мы используем итератор list.iterator() для перебора всех элементов списка как объектов типа Object. Метод hasNext() проверяет, есть ли следующий элемент в списке, и если это так, то метод next() возвращает этот элемент. Каждый элемент сохраняется в переменной element типа String, которая получается путем явного приведения типа (String) iterator.next(). Таким образом, мы можем избежать ошибки компиляции и успешно скомпилировать код.
Наконец, каждый элемент сохраняется в переменной element и выводится на экран при помощи метода System.out.println(element).
Таким образом, код выводит на экран все добавленные значения в порядке добавления:
data_1
data2_1
data_2